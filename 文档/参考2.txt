# 参考2



```xml
GET /cwmp http/1.1
Authorization: Digest username="admin", realm=/cwmp, nonce=fedb59f66e11029177704b3e2aecc676, uri="/cwmp", response="3534d55b189f4e5862342ff5e9cbad7f", opaque=e516948c29913259afd658467b9d6619, qop=auth-int, nc=10, cnonce="c15d255ea"
Content-Type: text/xml; charset="UTF-8"
Content-Length: 1237
SOAPAction:"urn:dslforum-org:cwmp-1-4"

<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cwmp="urn:dslforum-org:cwmp-1-0">
    <soap:Header>
        <cwmp:ID soapenv:mustUnderstand=1>
            long123
        </cwmp:ID>
        <cwmp:HoldRequests soapenv:mustUnderstand=1>
            1
        </cwmp:HoldRequests>
    </soap:Header>
    <soap:Body>
        <cwmp:Inform>
            <DeviceId>
                <Manufacturer>
                    设备制造商的名称
                </Manufacturer>
                <OUI>
                    设备特定序列号的产品类别的标识符
                </OUI>
                <ProductClass>
                    特定序列号的产品类别的标识符
                </ProductClass>
                <SerialNumber>
                    特定设备的标识符
                </SerialNumber>
            </DeviceId>
            <EventList soapenc:arrayType=tns:ParameterValueStruct[2]>
                <EventStruct>
                    <EventCode>
                        0 BOOTSTRAP
                    </EventCode>
                    <CommandKey>
                        CommandKey_0
                    </CommandKey>
                </EventStruct>
                <EventStruct>
                    <EventCode>
                        1 BOOT
                    </EventCode>
                    <CommandKey>
                        CommandKey_1
                    </CommandKey>
                </EventStruct>
            </EventList>
            <MaxEnvelopes>
                1
            </MaxEnvelopes>
            <CurrentTime>
                2024-11-19T17:51:00
            </CurrentTime>
            <RetryCount>
                0
            </RetryCount>
            <ParameterList>
                <ParameterValueStruct>
                    <Name>
                        parameter_1
                    </Name>
                    <Value>
                        76616c75655f32
                    </Value>
                </ParameterValueStruct>
                <ParameterValueStruct>
                    <Name>
                        parameter_2
                    </Name>
                    <Value>
                        76616c75655f32
                    </Value>
                </ParameterValueStruct>
            </ParameterList>
        </cwmp:Inform>
    </soap:Body>
</soap:Envelope>


```







```xml
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cwmp="urn:dslforum-org:cwmp-1-4">
    <soap:Header>
        <cwmp:ID soapenv:mustUnderstand=1>
            long123
        </cwmp:ID>
        <cwmp:HoldRequests soapenv:mustUnderstand=1>
            1
        </cwmp:HoldRequests>
    </soap:Header>
    <soap:Body>
        <cwmp:Inform>
            <DeviceId>
                <Manufacturer>
                    设备制造商的名称
                </Manufacturer>
                <OUI>
                    设备特定序列号的产品类别的标识符
                </OUI>
                <ProductClass>
                    特定序列号的产品类别的标识符
                </ProductClass>
                <SerialNumber>
                    特定设备的标识符
                </SerialNumber>
            </DeviceId>
            <EventList soapenc:arrayType=tns:ParameterValueStruct[2]>
                <EventStruct>
                    <EventCode>
                        0 BOOTSTRAP
                    </EventCode>
                    <CommandKey>
                        CommandKey_0
                    </CommandKey>
                </EventStruct>
                <EventStruct>
                    <EventCode>
                        1 BOOT
                    </EventCode>
                    <CommandKey>
                        CommandKey_1
                    </CommandKey>
                </EventStruct>
            </EventList>
            <MaxEnvelopes>
                1
            </MaxEnvelopes>
            <CurrentTime>
                2024-11-19T17:51:00
            </CurrentTime>
            <RetryCount>
                0
            </RetryCount>
            <ParameterList>
                <ParameterValueStruct>
                    <Name>
                        parameter_1
                    </Name>
                    <Value>
                        76616c75655f32
                    </Value>
                </ParameterValueStruct>
                <ParameterValueStruct>
                    <Name>
                        parameter_2
                    </Name>
                    <Value>
                        76616c75655f32
                    </Value>
                </ParameterValueStruct>
            </ParameterList>
        </cwmp:Inform>
    </soap:Body>
</soap:Envelope>
```





### 1、会话例子以及相互交流的具体的http消息

![image-20241030121055384](F:\share\PRO\CWMP_TEST\cwmptest\文档\tu\image-20241030121055384.png)

#### 1.1 过程

（1）打开连接 Open connect；

（2）SSL的初始化；

（3）cpe首先发出 “HTTP psot”消息，里面的内容是“Inform request”，这个“通知请求”是过程调用中的acs方法，结构和用发参考目录A；Inform 方法中，包含了“事件“（Event）的用法；

（4）acs受到（3）的消息后，向cpe发回复，即“HTTP response”消息，里面的内容是“Inform response”；

（5）cpe可以发送“HTTP post”消息头，但消息提可以为空；acs接收到“HTTP post”消息后，即使消息体是空的，也可以给出自己的回复“HTTP response”消息头，而回复的消息体可以加上一个rpc方法（cpe的方法），例如“GetParameterValues request”;

（6）cpe收到消息后，响应（5）提到的方法调用，使用“HTTP post”消息头，消息体的内容则是“GetParameterValues response”；

（7）同（5）、（6）类似，实现acs调用方法“SetParameterValues ”

（8）当acs发出“HTTP response”头部但是消息体为空，意味着断开连接……

#### 1.2 具体的消息内容

Encoding SOAP over HTTP，参考 [Simple Object Access Protocol (SOAP) 1.1 (w3.org)](https://www.w3.org/TR/2000/NOTE-SOAP-20000508/)



（1）HTTP request 

HTTP post方法，是客户端请求服务器的消息，具体可以是cpe 发送HTTP post 给acs。

```html
POST /cwmp HTTP/1.1
Host: acs.example.com
Authorization: Digest username="user", realm="Restricted Area", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093", uri="/protected/resource", response="6629fae49393a05397450978507c4ef1", opaque="5ccc069c403ebaf9f0171e9517f40e41", qop=auth, nc=00000001, cnonce="0a4f113b"
Content-Type: text/xml; charset="UTF-8"
Content-Length: 471
SOAPAction: "urn:dslforum-org:cwmp-1-0#Inform"


<soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <soap-env:Header>
        <cwmp:ID soap-env:mustUnderstand="1">API_00000001</cwmp:ID>
    </soap-env:Header>
    <soap-env:Body>
        <cwmp:Inform>
            <DeviceId>
                <Manufacturer>OEM Manufacturer Name</Manufacturer>
                <OUI>001122</OUI>
                <ProductClass>Device Product Class</ProductClass>
                <SerialNumber>123456789012</SerialNumber>
            </DeviceId>
            <Event>
                <EventStruct>
                    <EventCode>0 BOOTSTRAP</EventCode>
                </EventStruct>
            </Event>
            <MaxEnvelopes>1</MaxEnvelopes>
            <CurrentTime>2024-01-01T00:00:00Z</CurrentTime>
            <RetryCount>0</RetryCount>
        </cwmp:Inform>
    </soap-env:Body>
</soap-env:Envelope>
```

可以发现http头部，第一行 “POST /cwmp HTTP/1.1”；头部的其他域有

| 域             | 解释           | 数值例子                                                     |
| -------------- | -------------- | ------------------------------------------------------------ |
| Host           | 主机名称       | acs.example.com                                              |
| Authorization  | 认证           | Digest username="user", realm="Restricted Area", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093", uri="/protected/resource", response="6629fae49393a05397450978507c4ef1", opaque="5ccc069c403ebaf9f0171e9517f40e41", qop=auth, nc=00000001, cnonce="0a4f113b" |
| Content-Type   | 内容的类型     | text/xml; charset="UTF-8"                                    |
| Content-Length | 内容的长度     | 471                                                          |
| SOAPAction     | SOAP行为的解释 | "urn:dslforum-org:cwmp-1-0#Inform"                           |

下面是对http负荷的分析：

soap封装的内容，一条信封 soap-env:Envelope，信封里面有头部  soap-env:Header 和 主体 soap-env:Body 这两个部分，而主体里面的 cwmp:Inform 则是具体的rpc方法，该方法的数据模型和解释在标准文档的附录A中有解释。

```

```

（2）HTTP response

```xml
HTTP/1.1 200 OK
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
   <SOAP-ENV:Body>
       <m:GetLastTradePriceResponse xmlns:m="Some-URI">
           <Price>34.5</Price>
       </m:GetLastTradePriceResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```

第二个例子

```xml
HTTP/1.1 200 OK
Content-Type: text/xml; charset="utf-8"
Content-Length: xyz
<soap:Envelope
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
               xmlns:cwmp="urn:dslforum-org:cwmp-1-2">
    <soap:Body>
        <cwmp:Request>
            <argument>value</argument>
        </cwmp:Request>
    </soap:Body>
</soap:Envelope>
```

除了第一行 HTTP/1.1 200 OK 有所不一样，其他和 HTTP request大致相同

注意 信封 soap:Envelope 的属性列表

```
xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:cwmp="urn:dslforum-org:cwmp-1-2"
```









### 附录（提问和回答）

#### 附录A ：SOAPAction

cwmp协议中 ，http post消息中的SOAPAction该如何设置，为什么？

在 CWMP (CPE WAN Management Protocol) 中，HTTP POST 消息中的 `SOAPAction` 头字段用于指示请求的具体操作。CWMP 是基于 SOAP (Simple Object Access Protocol) 的协议，用于实现 CPE (Customer Premises Equipment) 和 ACS (Auto Configuration Server) 之间的通信。

##### `SOAPAction` 的作用

`SOAPAction` 头字段在 SOAP 请求中起到标识作用，告诉服务器即将执行的具体操作。这对于服务器来说非常重要，因为它可以根据 `SOAPAction` 的值来决定如何处理请求。如果没有正确设置 `SOAPAction`，服务器可能会拒绝处理请求或返回错误。

##### `SOAPAction` 的设置方式

在 CWMP 协议中，`SOAPAction` 通常设置为一个 URI，该 URI 代表了要执行的具体操作。这些操作通常对应于 CWMP 协议中定义的各种方法。

##### 常见的 `SOAPAction` 值

1. **`Inform`**：
   ```http
   SOAPAction: "urn:dslforum-org:cwmp-1-0#Inform"
   ```
   用于 CPE 向 ACS 报告其状态或事件。

2. **`SetParameterValues`**：
   ```http
   SOAPAction: "urn:dslforum-org:cwmp-1-0#SetParameterValues"
   ```
   用于 CPE 设置特定参数的值。

3. **`GetParameterValues`**：
   ```http
   SOAPAction: "urn:dslforum-org:cwmp-1-0#GetParameterValues"
   ```
   用于 CPE 获取特定参数的值。

4. **`GetParameterNames`**：
   ```http
   SOAPAction: "urn:dslforum-org:cwmp-1-0#GetParameterNames"
   ```
   用于 CPE 获取参数的名称列表。

5. **`SetParameterAttributes`**：
   ```http
   SOAPAction: "urn:dslforum-org:cwmp-1-0#SetParameterAttributes"
   ```
   用于 CPE 设置参数的属性。

6. **`GetParameterAttributes`**：
   ```http
   SOAPAction: "urn:dslforum-org:cwmp-1-0#GetParameterAttributes"
   ```
   用于 CPE 获取参数的属性。

##### 为什么需要设置 `SOAPAction`

1. **操作识别**：服务器通过 `SOAPAction` 头字段来识别客户端请求的具体操作，从而调用相应的处理逻辑。
2. **安全性**：某些操作可能需要特定的权限或认证，`SOAPAction` 可以帮助服务器进行权限检查。
3. **路由和分发**：在复杂的系统中，`SOAPAction` 可以帮助服务器将请求路由到正确的处理模块或服务。

##### 示例

以下是一个完整的 HTTP POST 请求示例，其中包含 `SOAPAction` 头字段：

```http
POST /cwmp HTTP/1.1
Host: acs.example.com
Content-Type: text/xml; charset="UTF-8"
Content-Length: 471
SOAPAction: "urn:dslforum-org:cwmp-1-0#Inform"

<?xml version="1.0"?>
<soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <soap-env:Header>
        <cwmp:ID soap-env:mustUnderstand="1">API_00000001</cwmp:ID>
    </soap-env:Header>
    <soap-env:Body>
        <cwmp:Inform>
            <DeviceId>
                <Manufacturer>OEM Manufacturer Name</Manufacturer>
                <OUI>001122</OUI>
                <ProductClass>Device Product Class</ProductClass>
                <SerialNumber>123456789012</SerialNumber>
            </DeviceId>
            <Event>
                <EventStruct>
                    <EventCode>0 BOOTSTRAP</EventCode>
                </EventStruct>
            </Event>
            <MaxEnvelopes>1</MaxEnvelopes>
            <CurrentTime>2024-01-01T00:00:00Z</CurrentTime>
            <RetryCount>0</RetryCount>
        </cwmp:Inform>
    </soap-env:Body>
</soap-env:Envelope>
```

在这个示例中，`SOAPAction` 被设置为 `"urn:dslforum-org:cwmp-1-0#Inform"`，表示这是一个 `Inform` 请求，用于 CPE 向 ACS 报告其状态。



```xml
<soap:Envelope
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
               xmlns:cwmp="urn:dslforum-org:cwmp-1-0">
    <soap:Header>
        <cwmp:ID soap:mustUnderstand="1">1234</cwmp:ID>
    </soap:Header>
    <soap:Body>
        <soap:Fault>
            <faultcode>Client</faultcode>
            <faultstring>CWMP fault</faultstring>
            <detail>
                <cwmp:Fault>
                    <FaultCode>9000</FaultCode>
                    <FaultString>Upload method not supported</FaultString>
                </cwmp:Fault>
            </detail>
        </soap:Fault>
    </soap:Body>
</soap:Envelope>
```



```xml
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cwmp="urn:dslforum-org:cwmp-1-0">
    <soap:Header>
        <cwmp:ID soap:mustUnderstand="1">1234</cwmp:ID>
    </soap:Header>
    <soap:Body>
        <soap:Fault>
            <faultcode>Client</faultcode>
            <faultstring>CWMP fault</faultstring>
            <detail>
                <cwmp:Fault>
                    <FaultCode>9000</FaultCode>
                    <FaultString>Upload method not supported</FaultString>
                </cwmp:Fault>
            </detail>
        </soap:Fault>
    </soap:Body>
</soap:Envelope>
```







### 2、sourceInsight 4 编辑器 bug

```c
//开启接收线程
//ret = pthread_create(&(session->threadRecv), NULL, thread_sessioncpe_recv, (void *)session);
//if(ret != RET_OK){LOG_ALARM("thread_sessioncpe_recv")
;return ret;}
```

![image-20241121212733729](F:\share\PRO\CWMP_TEST\cwmptest\文档\tu\image-20241121212733729.png)

`;return ret;}` 变成了新的一行

可见 其中有一个换行符，但是编辑器并没有显示出来，导致编译出错



### 3、线程之条件变量

> linux 编程中，某个线程的进行需要某个条件满足，才能进行下一步动作；在条件满足之前需要阻塞等待，希望不占用太多cpu时间，该如何实现

在Linux编程中，如果某个线程需要在某个条件满足时才继续执行，而在此之前需要阻塞等待，可以使用条件变量（`pthread_cond_t`）来实现。条件变量与互斥锁（`pthread_mutex_t`）结合使用，可以有效地实现线程的阻塞和唤醒，而不占用过多的CPU时间。

#### 示例代码

以下是一个简单的示例，展示了如何使用条件变量和互斥锁来实现线程的阻塞和唤醒：

```c
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// 条件变量和互斥锁
pthread_cond_t cond_var = PTHREAD_COND_INITIALIZER;
//替代 pthread_cond_init(&cond_var, NULL);
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

// 条件标志
int condition_met = 0;

// 生产者线程函数
void* producer(void* arg) {
    // 模拟生产数据
    sleep(2);
    
    // 获取互斥锁
    pthread_mutex_lock(&mutex);
    
    // 设置条件标志
    condition_met = 1;
    printf("Producer: Condition met, notifying consumer.\n");
    
    // 通知等待的消费者线程
    pthread_cond_signal(&cond_var);
    
    // 释放互斥锁
    pthread_mutex_unlock(&mutex);
    
    return NULL;
}

// 消费者线程函数
void* consumer(void* arg) {
    // 获取互斥锁
    pthread_mutex_lock(&mutex);
    
    // 检查条件是否满足
    while (!condition_met) {
        printf("Consumer: Condition not met, waiting...\n");
        
        // 阻塞等待条件变量
        pthread_cond_wait(&cond_var, &mutex);
    }
    
    // 条件满足，继续执行
    printf("Consumer: Condition met, continuing execution.\n");
    
    // 释放互斥锁
    pthread_mutex_unlock(&mutex);
    
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;

    // 创建生产者线程
    if (pthread_create(&producer_thread, NULL, producer, NULL) != 0) {
        perror("Failed to create producer thread");
        exit(EXIT_FAILURE);
    }

    // 创建消费者线程
    if (pthread_create(&consumer_thread, NULL, consumer, NULL) != 0) {
        perror("Failed to create consumer thread");
        exit(EXIT_FAILURE);
    }

    // 等待生产者线程结束
    if (pthread_join(producer_thread, NULL) != 0) {
        perror("Failed to join producer thread");
        exit(EXIT_FAILURE);
    }

    // 等待消费者线程结束
    if (pthread_join(consumer_thread, NULL) != 0) {
        perror("Failed to join consumer thread");
        exit(EXIT_FAILURE);
    }

    // 销毁条件变量和互斥锁
    pthread_cond_destroy(&cond_var);
    pthread_mutex_destroy(&mutex);

    return 0;
}
```

#### 详细说明

1. **条件变量和互斥锁初始化**:
   - `pthread_cond_t cond_var = PTHREAD_COND_INITIALIZER;`: 初始化条件变量。
   - `pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;`: 初始化互斥锁。

2. **条件标志**:
   - `int condition_met = 0;`: 用于标记条件是否满足。

3. **生产者线程**:
   - `producer` 函数模拟生产数据，设置条件标志，并通知等待的消费者线程。
   - `pthread_mutex_lock(&mutex);`: 获取互斥锁。
   - `condition_met = 1;`: 设置条件标志。
   - `pthread_cond_signal(&cond_var);`: 通知等待的消费者线程。
   - `pthread_mutex_unlock(&mutex);`: 释放互斥锁。

4. **消费者线程**:
   - `consumer` 函数获取互斥锁，检查条件是否满足，如果不满足则阻塞等待。
   - `while (!condition_met) { ... }`: 循环检查条件是否满足。
   - `pthread_cond_wait(&cond_var, &mutex);`: 阻塞等待条件变量。
   - `pthread_mutex_unlock(&mutex);`: 释放互斥锁。

5. **主函数**:
   - 创建生产者和消费者线程。
   - 等待生产者和消费者线程结束。
   - 销毁条件变量和互斥锁。

#### 关键点

- **互斥锁** (`pthread_mutex_t`): 用于保护共享资源，确保在检查和修改条件标志时不会发生竞态条件。
- **条件变量** (`pthread_cond_t`): 用于线程间的同步，使线程在条件不满足时阻塞等待，条件满足时被唤醒。
- **`pthread_cond_wait`**: 使当前线程阻塞并释放互斥锁，直到被 `pthread_cond_signal` 或 `pthread_cond_broadcast` 唤醒。
- **`pthread_cond_signal`**: 唤醒一个等待在条件变量上的线程。

通过这种方式，可以有效地实现线程的阻塞和唤醒，而不占用过多的CPU时间。如果您有更多问题或需要进一步的帮助，请随时告诉我！





### 4、线程之条件变量与超时
