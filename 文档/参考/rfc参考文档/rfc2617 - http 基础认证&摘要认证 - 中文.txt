






网络工作组 J. Franks
征求意见：2617 西北大学
已过时：2069 P. Hallam-Baker
类别：标准轨道 Verisign, Inc.
J. 霍斯特勒
AbiSource 公司
圣劳伦斯
Agranat 系统公司
P·利奇
微软公司
A. 卢奥托宁
网景通讯公司
L·斯图尔特
开放市场股份有限公司
1999 年 6 月


HTTP 身份验证：基本和摘要访问身份验证

本备忘录的状态

本文档规定了互联网标准跟踪协议
互联网社区，并请求讨论和建议
改进。请参阅当前版本的“互联网
标准化状态的“官方协议标准”（STD 1）
以及本议定书的现状。本备忘录的分发不受限制。

版权声明

版权所有 (C) 互联网协会 (1999)。保留所有权利。

抽象的

“HTTP/1.0”，包括基本访问规范
认证方案。该方案不被认为是一种安全的
用户身份验证方法（除非与某些
外部安全系统（如 SSL [5]）作为用户名和
密码以明文形式通过网络传递。

本文档还提供了 HTTP 的规范
认证框架，原始的Basic认证方案
以及基于加密哈希的方案，称为“摘要
访问身份验证”。因此，它也旨在充当
RFC 2069 [6] 的替代品。一些可选元素由
由于存在问题，RFC 2069 已从本规范中删除
自出版以来，还发现了其他新元素
兼容性，这些新元素已成为可选的，但
强烈推荐。



Franks 等人。标准轨道 [第 1 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


与 Basic 类似，摘要访问身份验证可验证双方
通信时知道一个共享的秘密（密码）；与 Basic 不同，
此验证无需发送密码即可完成
清晰，这是 Basic 最大的弱点。与大多数其他
身份验证协议中，最大的风险来源通常是
并非存在于核心协议本身，而是存在于政策和程序中
围绕其用途。

目录

1 访问认证.................................. 3
1.1 依赖 HTTP/1.1 规范................................ 3
1.2 访问认证框架................................ 3
2 基本认证方案................................................ 5
3 摘要访问认证方案.................................... 6
3.1 简介...................................... 6
3.1.1 目的.............................................. 6
3.1.2 总体操作................................. 6
3.1.3 摘要值的表示...................................... 7
3.1.4 限制................................................ 7
3.2 摘要报头的规范.................... 7
3.2.1 WWW-Authenticate 响应标头............ 8
3.2.2 授权请求标头................................ 11
3.2.3 Authentication-Info 标头................. 15
3.3 摘要操作.................................................. 17
3.4 安全协议协商.................................. 18
3.5 示例................................................ 18
3.6 代理认证和代理授权...... 19
4 安全注意事项.................................................. 19
4.1 使用基本身份验证
身份验证................................................. 19
4.2 使用摘要进行客户端身份验证
身份验证................................................. 20
4.3 限制使用 Nonce 值....................................... 21
4.4 摘要认证与基本认证的比较.... 22
4.5 重放攻击...................................... 22
4.6 多重认证造成的弱点
方案................................................. 23
4.7 在线字典攻击................................. 23
4.8 中间人.................................. 24
4.9 选择明文攻击................................ 24
4.10 预先计算的字典攻击.................... 25
4.11 批量暴力攻击...................................... 25
4.12 假冒服务器欺骗....................................... 25
4.13 存储密码.................................. 26
4.14 总结................................................ 26
5 示例实现................................................ 27
6 致谢................................................................ 31



Franks 等人。标准轨道 [第 2 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


7 参考文献................................................ 31
8 作者地址................................................ 32
9 完整版权声明................................................ 34

1 访问认证

1.1 依赖 HTTP/1.1 规范

此规范是 HTTP/1.1 规范[2]的配套规范。
它使用了该文档的增强型 BNF 第 2.1 节，并依赖于
该文档中定义的非终端和
HTTP/1.1 规范。

1.2 接入认证框架

HTTP 提供了简单的质询-响应身份验证机制
它可能被服务器用来质询客户端请求，也可能被
客户端提供身份验证信息。它使用可扩展的
不区分大小写的令牌来识别身份验证方案，
后跟以逗号分隔的属性值对列表，其中
携带通过该方式实现身份验证所需的参数
方案。

身份验证方案 = 令牌
auth-param = token "=" ( token | 引用字符串 )

401（未授权）响应消息由源服务器使用
挑战用户代理的授权。此响应必须
包含至少一个 WWW-Authenticate 标头字段
适用于所请求资源的挑战。407（代理
需要身份验证）响应消息由代理用来
挑战客户端的授权，并且必须包含代理
验证标头字段至少包含一个质询
适用于请求资源的代理。

挑战 = 身份验证方案 1*SP 1#身份验证参数

注意：用户代理在解析 WWW 时需要特别小心。
Authenticate 或 Proxy-Authenticate 标头字段值（如果包含）
如果有多个质询，或者有多个 WWW-Authenticate 标头
提供字段，因为挑战的内容本身可能
包含以逗号分隔的身份验证参数列表。

认证参数 realam 是为所有认证定义的
方案：

领域 = “领域” “=” 领域值
领域值 = 带引号的字符串



Franks 等人。标准轨道 [第 3 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


所有的 realm 指令（不区分大小写）都是必需的
发出质询的身份验证方案。领域值
（区分大小写），与规范根 URL（
对于 abs_path 为空的服务器的 absoluteURI；请参阅第 5.1.2 节
[2]) 定义了保护空间。
这些领域允许服务器上受保护的资源
划分成一组保护空间，每个空间都有自己的
身份验证方案和/或授权数据库。领域值
是一个字符串，通常由源服务器分配，可能具有
特定于身份验证方案的附加语义。请注意
可能存在多个具有相同身份验证方案的质询，但
不同境界。

希望通过来源验证自身身份的用户代理
服务器——通常（但不一定）在收到 401 后
（未经授权）——可以通过包含授权标头字段来实现
请求。客户端希望使用
代理——通常（但不一定）在收到 407（代理
需要身份验证）——可以通过添加代理来实现——
请求中的授权标头字段。授权
字段值和 Proxy-Authorization 字段值由以下部分组成
包含客户端身份验证信息的凭证
请求的资源所属的领域。用户代理必须
选择使用最强大的身份验证方案之一
了解并据此向用户请求凭证
挑战。

凭证 = 身份验证方案 #身份验证参数

请注意，许多浏览器只能识别 Basic，并且需要
它是第一个提供的身份验证方案。服务器应该只
如果最低限度可以接受的话，就包括 Basic。

保护空间决定了凭证可以
自动应用。如果先前的请求已获得授权，
相同的凭证可以重复用于该范围内的所有其他请求
保护空间的期限由
身份验证方案、参数和/或用户偏好。除非
认证方案另有定义的单一保护
空间不能超出其服务器的范围。

如果源服务器不希望接受发送的凭证
请求时，它应该返回 401（未授权）响应。
响应必须包含一个 WWW-Authenticate 标头字段，其中包含
至少一个（可能是新的）挑战适用于所请求的
资源。如果代理不接受使用
请求，它应该返回 407（需要代理身份验证）。
响应必须包含一个 Proxy-Authenticate 标头字段，其中包含



Franks 等人。标准轨道 [第 4 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


（可能是新的）挑战适用于所请求的代理
资源。

HTTP 协议并不限制应用程序只能如此简单
质询-响应机制进行访问认证。附加
可以使用传输层加密等机制，或者
通过消息封装，并附加标头字段
指定身份验证信息。但是，这些额外的
本规范没有定义机制。

代理对于用户代理必须完全透明
原始服务器进行身份验证。也就是说，它们必须转发
WWW-Authenticate 和 Authorization 标头保持不变，并遵循
规则见[2]第14.8节。Proxy-Authenticate和
Proxy-Authorization 标头字段是逐跳标头（请参阅
[2]第13.5.1节）。

2 基本认证方案

“基本”身份验证方案基于以下模型：
客户端必须使用用户 ID 和密码进行身份验证
每个领域。领域值应被视为不透明字符串
只能与其他领域相提并论
服务器。服务器只有在能够验证
Request-URI 保护空间的用户ID和密码。
没有可选的身份验证参数。

对于 Basic，上述框架的使用方式如下：

挑战 = “基础”领域
凭证 = “基本” 基本凭证

在收到对 URI 的未经授权的请求后
保护空间，原始服务器可能会回应类似的挑战
下列：

WWW-身份验证：基本领域=“WallyWorld”

其中“WallyWorld”是服务器分配的字符串，用于识别
请求 URI 的保护空间。代理可能会响应
使用 Proxy-Authenticate 标头字段的相同挑战。

为了获得授权，客户端发送用户 ID 和密码，
用单个冒号（“:”）字符分隔，在 base64 [7]
凭证中的编码字符串。

基本凭证 = base64 用户密码
base64-user-pass = <base64[4] user-pass 的编码，



Franks 等人。标准轨道 [第 5 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


但不限于 76 个字符/行>
user-pass = 用户ID“：”密码
用户 ID = *<TEXT（不包括“:”>
密码 = *TEXT

用户 ID 可能区分大小写。

如果用户代理希望发送用户 ID“Aladdin”和密码
“芝麻开门”，它将使用以下标头字段：

授权：Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

客户端应该假设所有路径的深度等于或大于
请求 URI 的路径字段中的最后一个符号元素也
在基本范围值指定的保护空间内
当前挑战。客户端可以抢先发送
请求资源时对应的授权标头
在没有收到服务器的另一个挑战的情况下。
类似地，当客户端向代理发送请求时，它可能会重用
Proxy-Authorization 标头字段中的用户 ID 和密码无需
收到代理服务器的另一个质询。请参阅第 4 节
与基本身份验证相关的安全注意事项。

3 摘要访问认证方案

3.1 简介

3.1.1 目的

称为“HTTP/1.0”的协议包括以下规范：
基本访问认证方案[1]。该方案不
被认为是一种安全的用户身份验证方法，因为用户
名称和密码以未加密的形式通过网络传递。
本节提供了不
以明文形式发送密码，称为“摘要访问
验证”。

摘要访问认证方案并非旨在成为
完全满足万维网的安全需求。这
该方案不提供消息内容的加密。目的是
只需创建一种访问身份验证方法，即可避免大多数
基本身份验证存在严重缺陷。

3.1.2 总体运行情况

与基本访问身份验证类似，摘要方案基于
简单的挑战-响应范式。摘要方案挑战
使用 nonce 值。有效响应包含校验和（通过



Franks 等人。标准轨道 [第 6 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


默认为用户名、密码、给定的
nonce 值、HTTP 方法和请求的 URI。这样，
密码永远不会以明文形式发送。与 Basic 方案一样，
用户名和密码必须以某种方式预先安排，而不是
本文件将解决此问题。

3.1.3 摘要值的表示

可选标头允许服务器指定用于
创建校验和或摘要。默认情况下使用 MD5 算法
这是本文档中描述的唯一算法。

就本文档而言，128 位 MD5 摘要表示
表示为 32 个 ASCII 可打印字符。128 位中的位
摘要从最高有效位转换为最低有效位，
每次四位的 ASCII 表示如下。每四位
位由其熟悉的十六进制表示法表示
字符 0123456789abcdef。也就是说，二进制 0000 表示为
字符 '0'、0001、'1'，依此类推，直到表示
1111 为 'f'。

3.1.4 限制

本文档中描述的摘要身份验证方案存在
摆脱了许多已知的限制。它旨在替代
仅需基本身份验证。这是一个基于密码的系统
并且（在服务器端）遭受着任何
密码系统。特别是，本协议没有规定
用户和服务器之间的初始安全安排
建立用户密码。

用户和实施者应该意识到，该协议并不
与 Kerberos 一样安全，但不如任何客户端私钥安全
计划。尽管如此，这总比没有好，比现在的
常用于 telnet 和 ftp，比 Basic 更好
验证。

3.2 摘要报头的规范

摘要访问认证方案在概念上类似于
基本方案。修改后的 WWW-Authenticate 标头的格式
行和授权标题行如下所示。在
此外，还指定了一个新的标头“Authentication-Info”。








Franks 等人。标准轨道 [第 7 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


3.2.1 WWW-Authenticate 响应标头

如果服务器收到对受访问保护对象的请求，并且
未发送可接受授权标头，服务器将响应
“401 Unauthorized”状态代码和 WWW-Authenticate 标头
根据上面定义的框架，对于摘要方案来说
使用方法如下：

challenge = "Digest" 摘要挑战

摘要挑战 = 1#(领域 | [域] | nonce |
[ 不透明 ] |[ 陈旧 ] | [ 算法 ] |
[ qop 选项 ] | [ 身份验证参数 ] )


域 = “域” “=” <"> URI ( 1*SP URI ) <">
URI = 绝对 URI | 绝对路径
nonce =“nonce”“=”nonce值
nonce 值 = 引用字符串
opaque = “opaque” “=” 带引号的字符串
陈旧 = “陈旧” “=”（“true” | “false”）
算法 = “算法” “=”（“MD5” | “MD5-sess” |
代币 )
qop-options = "qop" "=" <"> 1#qop-value <">
qop 值 = “auth”|“auth-int”| token

上面使用的指令值的含义如下
如下：

领域
向用户显示的字符串，以便他们知道哪个用户名和
密码。此字符串应至少包含
执行身份验证的主机，并且可能
指示可能具有访问权限的用户集合。示例
可能是“registered_users@gotham.news.com”。

领域
引用的、空格分隔的 URI 列表，如 RFC XURI 中所述
[7]，定义保护空间。如果 URI 是 abs_path，则
相对于规范根 URL（参见上文 1.2 节）
正在访问的服务器。此列表中的 absoluteURI 可能指
与正在访问的服务器不同的服务器。客户端可以使用
此列表用于确定具有相同
可以发送身份验证信息：任何具有以下 URI 的 URI
此列表作为前缀（在两者都成为绝对之后）可能是
假定位于同一保护空间中。如果此指令
省略或其值为空，则客户端应假定
保护空间由响应服务器上的所有 URI 组成。



Franks 等人。标准轨道 [第 8 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


此指令在 Proxy-Authenticate 标头中无意义，因为
保护空间始终是整个代理；如果存在
它应该被忽略。

随机数
服务器指定的数据字符串，该字符串应唯一生成
每次发生 401 响应时。建议
字符串可以是 base64 或十六进制数据。具体来说，由于
字符串在标题行中作为带引号的字符串传递，
不允许使用双引号字符。

nonce 的内容与实现有关。质量
实现取决于一个好的选择。对于
例如，构造为 base 64 编码

时间戳 H(时间戳“：”ETag“：”私钥)

其中时间戳是服务器生成的时间或其他不重复的
值，ETag 是与 HTTP ETag 标头关联的值
被请求实体，而私钥是只有被请求实体知道的数据
服务器。使用这种形式的随机数，服务器将重新计算
收到客户端身份验证标头后的哈希部分，以及
如果请求与标头中的 nonce 不匹配，则拒绝该请求
或者时间戳值不够新。这样
服务器可以限制 nonce 的有效时间。
ETag 阻止对更新版本的重放请求
资源。（注意：在
nonce 似乎为服务器提供了限制
将 nonce 重复用于最初获取它的同一客户端。
然而，这会破坏代理农场，因为来自单个
用户经常在农场中使用不同的代理。此外，IP
地址欺骗并没有那么难。）

实现可能选择不接受以前使用的
nonce 或之前使用过的摘要，以防止
重放攻击。或者，实现可以选择使用一次性
POST 或 PUT 请求的随机数或摘要以及 GET 的时间戳
请求。有关所涉及问题的更多详细信息，请参阅第 4 节。
本文档的说明。

对于客户端来说，nonce 是不透明的。

不透明
服务器指定的应返回的数据字符串
客户端在后续的授权标头中保持不变
请求的 URI 位于同一保护空间内。建议
该字符串是 base64 或十六进制数据。




Franks 等人。标准轨道 [第 9 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


陈旧
一个标志，表明来自客户端的先前请求是
由于 nonce 值已过时而被拒绝。如果 stale 为 TRUE
（不区分大小写），客户端可能希望简单地重试请求
使用新的加密响应，而无需重新提示用户输入
新的用户名和密码。服务器应仅将 stale 设置为 TRUE
如果它收到一个请求，该请求的随机数无效，但
该随机数的有效摘要（表明客户端知道
正确的用户名/密码）。如果 stale 为 FALSE，或者其他任何
大于 TRUE，或者不存在陈旧指令，则用户名
和/或密码无效，必须获取新的值。

算法
表示用于生成摘要的一对算法的字符串
以及校验和。如果不存在，则假定为“MD5”。
如果不理解算法，则应忽略挑战
（如果有多个，则使用不同的）。

在本文档中，通过应用摘要获得的字符串
将算法与秘密“秘密”的数据“数据”表示为
通过 KD(secret, data) 和应用
校验和算法对数据“data”的计算结果将表示为H(data)。
符号 unq(X) 表示不带引号的字符串 X 的值
周围的引号。

对于“MD5”和“MD5-sess”算法

H(数据) = MD5(数据)

和

KD(秘密，数据) = H(concat(秘密，“:”，数据))

即，摘要是秘密的 MD5 与冒号连接
与数据连接。“MD5-sess”算法旨在
允许高效的第三方身份验证服务器；
使用上的区别请参见3.2.2.2节的描述。

qop 选项
此指令是可选的，但仅适用于向后
与 RFC 2069 [6] 兼容；它应该被所有人使用
符合此版本摘要方案的实现。
如果存在，则它是一个由一个或多个标记组成的带引号的字符串，表示
服务器支持的“保护质量”值。
值“auth”表示身份验证；值“auth-int”
表示具有完整性保护的身份验证；参见





Franks 等人。标准轨道 [第 10 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


计算响应指令值的描述如下
此选项的应用。无法识别的选项必须
忽略。

授权参数
此指令允许将来扩展。任何无法识别的
指令必须被忽略。

3.2.2 授权请求标头

客户端需要重试该请求，并传递授权
按照上述框架定义的标题行，
使用方法如下。

凭证 = “Digest” 摘要响应
摘要响应 = 1#( 用户名 | 领域 | 随机数 | 摘要 uri
| 响应 | [ 算法 ] | [cnonce] |
[不透明] | [消息-qop] |
[nonce 计数] | [auth 参数] )

用户名 = “用户名” “=”用户名值
用户名值 = 带引号的字符串
摘要uri =“uri”“=”摘要uri值
digest-uri-value = request-uri ; 按照 HTTP/1.1 规定
message-qop = "qop" "= qop 值
cnonce =“cnonce”“=”cnonce值
cnonce 值 = nonce 值
nonce 计数 = “nc” “=” nc 值
nc 值 = 8LHEX
响应 = “响应” “=” 请求摘要
请求摘要 = <">32LHEX<">
LHEX =“0”| “1”| “2”| “3”|
“4”|“5”|“6”|“7”|
“8” | “9” | “a” | “b” |
“c” | “d” | “e” | “f”

不透明和算法字段的值必须是提供的值
在 WWW-Authenticate 响应标头中
要求。

回复
按照以下定义计算的 32 个十六进制数字的字符串，证明
用户知道密码

用户名
指定领域中的用户的名称。





Franks 等人。标准轨道 [第 11 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


摘要-uri
请求行的请求 URI 中的 URI；此处重复
因为代理被允许在传输过程中更改请求行。

质量控制
指示客户端已应用的“保护质量”
消息。如果存在，其值必须是以下备选之一
服务器在 WWW-Authenticate 标头中指示它支持该功能。
这些值会影响请求摘要的计算。注意
这是一个单一的标记，而不是一个引用的替代方案列表，
在 WWW-Authenticate 中。此指令是可选的，以便
保持向后兼容性，并实现最小
RFC 2069 [6]，但如果服务器指示 qop
通过在 WWW-Authenticate 中提供 qop 指令来支持
标头字段。

克诺斯
如果发送了 qop 指令，则必须指定此项（请参阅上文），并且
如果服务器没有发送 qop 指令，则不得指定
WWW-Authenticate 标头字段。cnonce 值是不透明的
客户端提供的带引号的字符串值，客户端和客户端均使用
和服务器以避免选择明文攻击，提供相互
身份验证，并提供一些消息完整性保护。
请参阅下面有关响应计算的描述-
摘要和请求摘要值。

nonce 计数
如果发送了 qop 指令，则必须指定此项（请参阅上文），并且
如果服务器没有发送 qop 指令，则不得指定
WWW-Authenticate 标头字段。nc 值是十六进制
请求次数统计（包括当前请求）
客户端已在此请求中发送了 nonce 值。对于
例如，在响应给定 nonce 而发送的第一个请求中
值，客户端发送“nc=00000001”。此操作的目的是
指令是允许服务器通过以下方式检测请求重放
维护此计数的自己的副本 - 如果相同的 nc 值
看到两次，则请求为重放。参见描述
以下是请求摘要值的构造。

授权参数
此指令允许将来扩展。任何无法识别的
指令必须被忽略。

如果指令或其值不合适，或者所需的指令
缺少，正确的响应是 400 Bad Request。如果请求-
摘要无效，则应记录登录失败，因为
单个客户端多次登录失败可能表明攻击者
尝试猜测密码。



Franks 等人。标准轨道 [第 12 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


上面的 request-digest 的定义表明了它的编码
值。以下定义显示如何计算该值。

3.2.2.1 请求摘要

如果“qop”值为“auth”或“auth-int”：

请求摘要 = <"> < KD ( H(A1), unq(nonce 值)
“：” nc 值
“：” unq（cnonce值）
“：” unq（qop 值）
“：”H（A2）
）<">

如果不存在“qop”指令（此构造适用于
与 RFC 2069 的兼容性):

请求摘要 =
<"> < KD ( H(A1), unq(nonce 值) ":" H(A2) ) >
<">

请参见下文了解 A1 和 A2 的定义。

3.2.2.2 A1

如果“算法”指令的值为“MD5”或未指定，则
A1 是：

A1 = unq (用户名-值) ":" unq (领域-值) ":" passwd

在哪里

passwd = <用户密码>

如果“算法”指令的值为“MD5-sess”，则 A1 为
只计算一次——在客户端第一次请求时
收到来自服务器的 WWW-Authenticate 质询。它使用
该质询的服务器随机数，以及第一个客户端随机数值
构建A1如下：

A1 = H( unq(用户名-值) “:” unq(领域-值)
“：”密码）
“：” unq（nonce值）“：” unq（cnonce值）

这将创建一个“会话密钥”，用于后续身份验证
请求和响应对于每个“身份验证”都是不同的
会话”，从而限制了任何一个会话中哈希处理的材料数量
密钥。（注：有关身份验证会话的进一步讨论，请参阅



Franks 等人。标准轨道 [第 13 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


3.3 节）因为服务器只需要使用用户的哈希值
凭证以创建 A1 值，这种构造可以
与第三方认证服务一起使用，以便
Web 服务器不需要实际的密码值。
这种协议的规范超出了本文的范围
规格。

3.2.2.3 A2

如果“qop”指令的值为“auth”或未指定，则 A2
是：

A2 = 方法“：”digest-uri-value

如果“qop”值为“auth-int”，则A2为：

A2 = 方法“：”digest-uri-value“：”H（实体主体）

3.2.2.4 指令值和引号字符串

请注意，许多指令的值，例如“用户名-
值”，被定义为“带引号的字符串”。但是，“unq”符号
表示在形成
字符串 A1。因此，如果授权标头包含字段

用户名="Mufasa", realm=myhost@testrealm.com

并且用户 Mufasa 的密码为“Circle Of Life”，则 H(A1) 为
H(Mufasa:myhost@testrealm.com:Circle Of Life) 没有引号
在消化后的字符串中。

摘要中的任何字符串中都不允许有空格
除非引用中存在空格，否则将应用函数 H()
字符串或实体主体，其内容构成要被
消化。例如，上面说明的字符串 A1 必须是

Mufasa:myhost@testrealm.com:Circle Of Life

冒号两边没有空格，但有白色
密码值中使用的单词之间的空格。同样，
H() 消化的其他字符串不得有空格
除非该空格
位于被引用的字符串或被消化的实体主体中。

还要注意，如果应用了完整性保护（qop=auth-int），
H（entity-body）是实体主体的哈希值，而不是消息主体的哈希值 -
它是在发送方应用任何传输编码之前计算的




Franks 等人。标准轨道 [第 14 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


并且被收件人移除后。请注意，此
包括多部分边界和嵌入标题在每一部分
任何多部分内容类型。

3.2.2.5 各种考虑

“Method”值是第节中指定的 HTTP 请求方法
5.1.1 中的 [2]. request-uri 值是来自
请求行如 [2] 中 5.1.2 节所述。这可能是“*”，
5.1.2 节中指定的“absoluteURL”或“abs_path”
[2]，但它必须与请求 URI 一致。特别是，它必须
如果请求 URI 是“绝对 URL”，则为“绝对 URL”。
“cnonce-value” 是客户端选择的可选值，其目的是
挫败选择明文攻击。

认证服务器必须确保
“uri”指令与在
请求行；如果不是，服务器应该返回 400 Bad
请求错误。（由于这可能是攻击的征兆，服务器
实施者可能需要考虑记录此类错误。）目的
在此字段中复制请求 URL 中的信息是为了
处理中间代理可能改变
客户端的请求行。这改变了（但可能是语义上的）
等效）请求不会产生与该相同的摘要
由客户计算。

实施者应该了解如何验证交易
与共享缓存交互。HTTP/1.1 协议规定
当共享缓存（参见 [2] 的第 13.7 节）收到请求时
包含授权标头和中继该授权标头的响应
请求，它不得将该响应作为对任何其他
请求，除非两个 Cache-Control 中的一个（参见 [2] 的第 14.9 节）
指令是否出现在响应中。如果原始响应
包含“必须重新验证”缓存控制指令，缓存可以
使用该响应的实体来回复后续请求，
但必须首先使用源服务器重新验证它，使用
新请求中的请求标头允许源服务器
验证新请求。或者，如果原始响应
包括“公共”Cache-Control指令，响应实体
可能会在回复任何后续请求时返回。

3.2.3 Authentication-Info 标头

Authentication-Info 标头用于服务器进行通信
关于成功认证的一些信息
回复。





Franks 等人。标准轨道 [第 15 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


AuthenticationInfo = “身份验证信息” “：”身份验证信息
auth-info = 1#(nextnonce | [ 消息-qop ]
| [ 响应身份验证 ] | [ cnonce ]
| [随机数计数] )
nextnonce =“nextnonce”“=”随机数值
响应-auth =“rspauth”“=”响应-摘要
响应摘要 = <"> *LHEX <">

nextnonce 指令的值是服务器希望的随机数
客户端将使用其进行未来的身份验证响应。服务器
可以发送带有 nextnonce 字段的 Authentication-Info 标头作为
实现一次性或以其他方式更改随机数的方法。如果
如果存在 nextnonce 字段，客户端在构造时应该使用它
下一个请求的授权标头。客户端失败
这样做可能会导致服务器重新发出身份验证请求
带有“stale=TRUE”。

服务器实现应该仔细考虑性能
使用此机制的含义；流水线请求将
如果每个响应都包含 nextnonce 指令，则不可能
服务器收到的下一个请求必须使用它。
应考虑性能与安全性
允许旧的 nonce 值在有限的时间内使用
允许请求流水线的时间。使用 nonce-count 可以
保留新服务器随机数的大部分安全优势
而不会对流水线产生有害影响。

消息质量控制
表示应用于
服务器响应。值“auth”表示认证；
值“auth-int”表示完整性认证
保护。服务器应该对消息使用相同的值-
客户端在响应中发送的 qop 指令
相应的请求。

“response-auth”指令中的可选响应摘要
支持相互认证——服务器证明它知道
用户的秘密，并且 qop=auth-int 也提供了有限的完整性
响应的保护。“响应摘要”值是通过计算得出的
和授权标头中的“请求摘要”一样，不同之处在于
如果“qop=auth”或未在授权标头中指定
请求，A2是

A2 = “:”摘要uri值

如果“qop=auth-int”，则 A2 是

A2 = “:” 摘要 uri 值 “:” H (实体主体)



Franks 等人。标准轨道 [第 16 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


其中“digest-uri-value”是“uri”指令的值
请求中的授权标头。“cnonce-value”和“nc-
值”必须是该消息发送给客户端的请求值
是响应。“response-auth”、“cnonce”和“nonce-count”
如果“qop=auth”或“qop=auth-int”，则必须存在指令
指定的。

HTTP 请求尾部允许使用 Authentication-Info 标头
通过分块传输编码传输的消息。

3.3 摘要操作

收到授权标头后，服务器可能会检查其
通过查找与提交的密码相对应的密码来验证其有效性
用户名。然后，服务器必须执行相同的摘要操作
客户端进行 MD5 等加密，并将结果与
给定的请求摘要值。

请注意，HTTP 服务器实际上并不需要知道用户的
明文密码。只要 H(A1) 对服务器可用，
可以验证授权标头的有效性。

客户端对 WWW-Authenticate 质询的响应，以获得保护
space 开始与该保护空间进行身份验证会话。
身份验证会话持续到客户端收到另一个
来自保护空间内任意服务器的 WWW 身份验证质询。
客户端应该记住用户名、密码、随机数、随机数计数和
与身份验证会话关联的不透明值，用于
在将来的请求中构建授权标头
保护空间。授权标头可能包括
先发制人；这样做可以提高服务器效率，并避免额外的
往返进行身份验证挑战。服务器可以选择
接受旧的授权标头信息，即使
包含的 nonce 值可能不是最新的。或者，服务器
可能会返回带有新 nonce 值的 401 响应，从而导致客户端
重试请求；通过在此响应中指定 stale=TRUE，
服务器通知客户端使用新的随机数重试，但没有
提示输入新的用户名和密码。

因为客户端需要返回不透明的值
服务器在会话期间向其发出的指令，
不透明数据可用于传输身份验证会话状态
信息。（请注意，任何此类使用也可以更
通过将状态包含在 nonce 中，可以轻松安全地进行操作。例如，
服务器可以负责验证内容
实际上位于另一台服务器上。它可以通过让
第一个 401 响应包含一个域指令，其值包含
第二台服务器上的 URI，以及一个不透明指令，其值



Franks 等人。标准轨道 [第 17 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


包含状态信息。客户端将在
此时服务器可能会以 301/302 重定向进行响应，
指向第二台服务器上的 URI。客户端将遵循
重定向，并传递授权标头，包括
<不透明> 数据。

与基本方案一样，代理必须完全透明
摘要访问身份验证方案。也就是说，他们必须转发
WWW-Authenticate、Authentication-Info 和 Authorization 标头
未受影响。如果代理希望在发出请求之前验证客户端身份
转发到服务器，可以使用代理来完成
身份验证和代理授权标头在第 3.6 节中描述
以下。

3.4 安全协议协商

对于服务器来说，了解哪些安全方案是有用的
客户端能够处理。

服务器可能希望将 Digest 作为其
身份验证方法，即使服务器不知道
客户端支持它。如果
服务器仅指定它无法处理的身份验证方案。

3.5 示例

以下示例假设受访问保护的文档是
通过 GET 请求从服务器请求。
文档是“http://www.nowhere.org/dir/index.html”。客户端和
服务器知道此文档的用户名是“Mufasa”，并且
密码是“Circle Of Life”（每个字母之间有一个空格
三个词）。

客户端第一次请求文档时，无需授权
标头已发送，因此服务器响应：

HTTP/1.1 401 未授权
WWW-身份验证：摘要
realm="testrealm@host.com",
qop="auth,auth-int",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
不透明=“5ccc069c403ebaf9f0171e9517f40e41”

客户端可能会提示用户输入用户名和密码，
它将用新的请求进行响应，包括以下内容
授权标头：





Franks 等人。标准轨道 [第 18 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


授权：摘要用户名=“Mufasa”，
realm="testrealm@host.com",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
uri="/dir/index.html",
qop=身份验证，
数控=00000001，
cnonce="0a4f113b",
响应="6629fae49393a05397450978507c4ef1",
不透明=“5ccc069c403ebaf9f0171e9517f40e41”

3.6 代理认证和代理授权

摘要认证方案也可用于认证
用户到代理，代理到代理，或代理到原始服务器
使用 Proxy-Authenticate 和 Proxy-Authorization 标头。这些
标头是 Proxy-Authenticate 和 Proxy-
授权标头在 10.33 和 10.34 节中指定
HTTP/1.1 规范 [2] 并且它们的行为服从
限制条件。代理交易
身份验证与前面描述的非常相似。
接收需要身份验证的请求，代理/服务器
必须发出“407 需要代理身份验证”响应，并
“Proxy-Authenticate”标头。
Proxy-Authenticate 标头与 WWW-
按照上面第 3.2.1 节的定义验证标头。

然后，客户端/代理必须使用代理重新发出请求
授权标头，其中包含指定的指令
上面 3.2.2 节中的授权标头。

在后续响应中，服务器发送 Proxy-Authentication-Info
指令与 Authentication-Info 标头的指令相同
场地。

请注意，原则上可以要求客户端进行身份验证
发送给代理和终端服务器，但响应永远不会相同。

4 安全注意事项

4.1 使用基本身份验证对客户端进行身份验证

基本身份验证方案不是用户的安全方法
身份验证，也不会以任何方式保护实体，
以明文形式在用作
运营商。HTTP 不会阻止额外的身份验证方案，并且
加密机制被用来提高安全性或
增加增强功能（例如使用一次性密码的方案）
进行基本身份验证。



Franks 等人。标准轨道 [第 19 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


基本身份验证中最严重的缺陷是它导致
通过明文传输用户密码
物理网络。正是这个问题导致摘要认证
尝试解决。

由于基本身份验证涉及明文传输
不应使用密码（未经增强）来保护
敏感或有价值的信息。

基本身份验证的常见用途是用于识别目的
-- 要求用户提供用户名和密码
例如，为了收集准确的
服务器上的使用情况统计信息。当以这种方式使用时，很容易
认为，如果非法访问
受保护的文档不是一个主要问题。这仅在以下情况下才正确：
服务器向用户发出用户名和密码，
特别是不允许用户选择自己的密码。
危险的出现是因为天真的用户经常重复使用单个
密码以避免维护多个密码的任务。

如果服务器允许用户选择自己的密码，那么
威胁不仅是未经授权访问服务器上的文档，而且
未经授权访问其他系统上的任何其他资源
用户使用相同的密码进行保护。此外，在
服务器的密码数据库中，许多密码也可能是用户的
其他网站的密码。此类网站的所有者或管理员
因此，系统可能会使系统的所有用户面临
如果这些信息不是
以安全的方式进行维护。

基本身份验证也容易受到伪造的欺骗
服务器。如果用户被诱导相信他正在连接到
当主机包含受基本身份验证保护的信息时，
事实上，他正在连接到一个敌对的服务器或网关，那么
攻击者可以请求密码，将其存储以供日后使用，并假装
错误。这种类型的攻击不可能通过 Digest 实现
身份验证。服务器实施者应该防范
通过网关或 CGI 进行此类伪造的可能性
脚本。特别是，服务器简单地
将连接移交给网关。然后该网关可以使用
持久连接机制，用于进行多个事务
以某种方式冒充原始服务器，与客户端通信
客户端无法检测到。

4.2 使用摘要认证方式进行客户端认证

摘要式身份验证无法提供强身份验证
机制，例如与基于公钥的机制相比。



Franks 等人。标准轨道 [第 20 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


然而，它比（例如）CRAM-MD5 强得多，
已被提议与 LDAP [10]、POP 和 IMAP 一起使用（参见 RFC 2195
[9]）。它的目的是取代更弱、甚至更
危险的基本机制。

摘要式身份验证不提供任何机密性保护，除了
保护实际密码。其余所有请求和
窃听者可以获得响应。

摘要式认证仅提供有限的完整性保护
任一方向的消息。如果使用 qop=auth-int 机制，
用于计算 WWW 的消息部分
身份验证和授权标头字段响应指令值
（参见上文第 3.2 节）受到保护。大多数标头字段及其
值可能会作为中间人攻击的一部分被修改。

Digest 无法满足安全 HTTP 事务的许多需求
身份验证。对于这些需求，TLS 或 SHTTP 更合适
协议。特别是摘要式身份验证不能用于任何
需要保密保护的交易。尽管如此，许多
摘要式身份验证仍然有用，并且
适当的。目前使用的任何使用 Basic 的服务都应该
尽快切换到摘要。

4.3 限制使用 Nonce 值

摘要方案使用服务器指定的随机数来播种
生成请求摘要值（如第节所述
3.2.2.1 节中的示例 nonce 所示，
服务器可以自由地构造随机数，以便它只能用于
来自特定客户、特定资源、有限
时间段或使用次数，或任何其他限制。
从而加强了对重放等攻击的保护
攻击（见 4.5）。然而，应该注意的是，该方法
选择用于生成和检查随机数也具有性能和
资源影响。例如，服务器可以选择允许
每个 nonce 值只能使用一次，方法是维护
每个最近发出的随机数是否已返回，以及
在 Authentication-Info 标头中发送 next-nonce 指令
每次响应的字段。这可以防止甚至立即
重放攻击，但检查 nonce 值的成本很高，也许
更重要的是会导致任何流水线的身份验证失败
请求（可能返回一个过时的随机数指示）。同样，
合并请求特定元素，例如
资源将 nonce 的使用限制在该版本的资源上
并且也破坏了流水线。因此，这样做可能对
有副作用的方法，但对于那些
但事实并非如此。



Franks 等人。标准轨道 [第 21 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


4.4 摘要认证与基本认证的比较

摘要式身份验证和基本身份验证都非常薄弱
安全强度谱。但两者之间的比较
指出用 Digest 取代 Basic 的实用性，甚至是必要性。

对这些交易类型构成的最大威胁
协议使用的一种方式是网络监听。这种交易
例如，可能涉及在线访问数据库，其用途是
仅限于付费用户。使用基本身份验证
窃听者可以获得用户的密码。这不仅
允许他访问数据库中的任何内容，但更糟糕的是，
将允许访问用户使用相同权限保护的任何其他内容
密码。

相比之下，使用摘要身份验证，窃听者只能获得
访问相关交易而不是用户密码。
窃听者获得的信息将允许重放
攻击，但只请求相同的文档，甚至
可能会受到服务器随机数选择的限制。

4.5 重放攻击

针对摘要式身份验证的重放攻击通常是
对于简单的 GET 请求来说毫无意义，因为窃听者会
已经看到了他通过重播所能获得的唯一文件。
这是因为请求文档的 URI 在
客户端请求，服务器将只传送该文档。通过
一旦窃听者拥有了基本身份验证，
用户密码，任何受该密码保护的文档都可以被
他。

因此，出于某些目的，有必要防止重放
攻击。一个好的 Digest 实现可以通过多种方式实现这一点。
服务器创建的“nonce”值依赖于实现，但如果
它包含客户端 IP 摘要、时间戳、资源
ETag 和私钥（如上所述）然后重放
攻击并不简单。攻击者必须让服务器相信
请求来自错误的 IP 地址，必然导致服务器
将文档发送到不同于地址的 IP 地址
攻击者认为该文档正在被发送到该目标。攻击只能
在时间戳到期之前的时间段内成功。消化
客户端 IP 和 nonce 中的时间戳允许实现
不维持交易之间的状态。

对于不存在重放攻击可能性的应用程序
可以容忍服务器使用一次性随机数值，这些值不会被
第二次使用。这需要服务器的开销



Franks 等人。标准轨道 [第 22 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


记住在 nonce 时间之前已经使用了哪些 nonce 值
标记（以及由此构建的摘要）已过期，但
有效地防止重放攻击。

实施时必须特别注意
POST 和 PUT 请求重放攻击。除非服务器使用
一次性或其他限制使用的随机数和/或坚持使用
qop=auth-int 的完整性保护，攻击者可以重放
成功请求的有效凭证（使用伪造的表单）
数据或其他消息主体。即使使用完整性保护
标头字段中的大多数元数据不受保护。正确的随机数
生成和检查提供了一些防止重放的保护
以前使用过的有效凭证，但请参见 4.8。

4.6 多重认证方案造成的弱点

HTTP/1.1 服务器可能会返回多个带有 401 的质询
（认证）响应，并且每个质询可能使用不同的
身份验证方案。用户代理必须选择使用最强的身份验证方案
它理解的方案并根据该方案向用户请求凭证
应对这一挑战。

请注意，许多浏览器只能识别 Basic，并且需要
它是第一个提供的身份验证方案。服务器应该只
如果最低限度可以接受的话，就包括 Basic。

当服务器使用以下方式提供身份验证方案选择时
WWW-Authenticate 标头，结果身份验证的强度
只与最弱的身份验证一样好
方案。请参阅下面第 4.8 节，了解特定攻击的讨论
利用多种身份验证方案的场景。

4.7 在线字典攻击

如果攻击者可以窃听，那么它就可以测试任何偷听到的
nonce/response 对与常用词列表相对应。此类列表是
通常比可能的密码总数要小得多。
计算列表上每个密码的响应的成本
每次挑战一次。

服务器可以通过不允许用户选择来缓解这种攻击
字典中的密码。









Franks 等人。标准轨道 [第 23 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


4.8 中间人

基本身份验证和摘要身份验证都容易受到“人为”攻击
中间人 (MITM) 攻击，例如来自敌对或受感染的
代理。显然，这会带来窃听的所有问题。
但这也给攻击者提供了一些额外的机会。

一种可能的中间人攻击是添加一个弱
身份验证方案的选择集，希望客户端
将使用一个暴露用户凭据（例如密码）的。对于
因此，客户端应该始终使用最强大的方案
它从提供的选择中理解。

更好的 MITM 攻击是删除所有提供的选项，
用只需要基本挑战的挑战来代替它们
身份验证，然后使用来自基本
身份验证使用
更强大的计划。一种特别阴险的方式安装
这种 MITM 攻击就是提供“免费”代理缓存服务
对于容易受骗的用户

用户代理应该考虑采取一些措施，比如呈现视觉
在证书请求时注明什么
认证方案是使用，或记住最强的
服务器曾经请求过身份验证方案，并产生
警告信息，然后再使用较弱的。它也可能是一个很好的
为用户代理配置以要求摘要
身份验证，或者来自特定站点的身份验证。

或者，敌对代理可能会欺骗客户端发出请求
攻击者想要的，而不是客户端想要的。当然，这是
仍然比针对 Basic 的类似攻击要困难得多
验证。

4.9 选择明文攻击

通过摘要式身份验证，中间人攻击或恶意服务器可以
任意选择客户端将用来计算的随机数
响应。这被称为“选择明文”攻击。
选择已知的随机数可以使密码分析变得更容易[8]。

但是，无法分析 Digest 使用的 MD5 单向函数
目前已知可以使用选择明文。

针对这种攻击的对策是让客户端
配置为需要使用可选的“cnonce”指令；
这允许客户端以不
由攻击者选择。



Franks 等人。标准轨道 [第 24 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


4.10 预先计算的字典攻击

使用摘要式身份验证，如果攻击者可以执行选定的
明文攻击，攻击者可以预先计算许多
常用词到其选择的随机数，并存储一个词典
（响应，密码）对。这种预计算通常可以在
在许多机器上并行。然后它可以使用选定的明文
攻击以获取与该挑战相对应的响应，并且
只需在字典中查找密码即可。即使大多数密码
字典中没有，但有些可能在。由于攻击者可以
选择挑战，计算每个挑战的响应的成本
列表中的密码可以通过查找许多密码来分摊。
编写包含 1 亿个密码/响应对的词典大约需要
3.2 GB 的磁盘存储空间。

针对这种攻击的对策是让客户端
配置为需要使用可选的“cnonce”指令。

4.11 批量暴力攻击

通过摘要式身份验证，MITM 可以执行选定的明文
攻击，并可以收集许多用户对同一随机数的响应。
然后它可以找到任何密码子集内的所有密码
空间将在一个单一的
越过那个空间。它还减少了找到第一个
密码的倍数等于随机数/响应对的数量
收集。这种对密码空间的搜索通常可以在
在多台机器上并行，甚至一台机器也可以搜索大量
密码空间的子集非常快——有报告称
在几个小时内搜索所有包含六个或更少字母的密码。

针对这种攻击的对策是让客户端
配置为需要使用可选的“cnonce”指令。

4.12 假冒服务器欺骗

基本身份验证容易受到伪造的欺骗
服务器。如果用户被诱导相信她正在连接到
主机包含受她知道的密码保护的信息，当
事实上，她正在连接到一个敌对的服务器，然后敌对的
服务器可以请求密码，将其存储起来以供日后使用，并假装
错误。这种类型的攻击对于 Digest 来说更困难
身份验证——但客户端必须知道要求摘要
可以使用身份验证，也许可以使用一些技术
如上所述，用于对抗“中间人”攻击。同样，
用户可以通过视觉指示来检测这种攻击
使用的身份验证机制，并提供适当的指导
解释每个方案的含义。



Franks 等人。标准轨道 [第 25 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


4.13 存储密码

摘要式身份验证要求身份验证代理（通常
服务器）存储一些来自用户名和密码的数据
在与给定领域关联的“密码文件”中。通常这
可能包含由用户名和 H(A1) 组成的对，其中 H(A1) 是
如上所述的用户名、领域和密码的摘要值
多于。

这样做的安全隐患是，如果这个密码文件
受到攻击后，攻击者可以立即访问
使用此域的服务器。与标准 UNIX 密码不同
文件，此信息无需解密即可访问
与此文件关联的服务器域中的文档。另一方面
解密，或者更可能是暴力攻击，将是
需要获取用户的密码。这就是
realm 是存储在密码文件中的摘要数据的一部分。它
意味着如果一个摘要认证密码文件被泄露，
不会自动危害使用相同用户名的其他人
和密码（尽管这确实会使他们遭受暴力攻击）。

这会带来两个重要的安全后果。首先
密码文件必须受到保护，就像它包含未加密的
密码，因为为了访问其文档的目的
领域，它确实做到了。

这样做的第二个结果是，领域字符串应该
在任何单个用户可能使用的所有领域中都是独一无二的。在
特别是领域字符串应该包括主机的名称
身份验证。客户端无法验证
服务器是摘要式认证的一个弱点。

4.14 总结

按照现代加密标准，摘要认证是比较弱的。但是
对于很多用途来说，它作为替代品很有价值
基本身份验证。它弥补了以下缺陷中的一些（但不是全部）：
基本身份验证。其强度可能取决于
实现。特别是 nonce 的结构（它是
取决于服务器实现）可能会影响
发起重放攻击。一系列服务器选项是合适的
例如，有些实现可能愿意接受
一次性随机数或摘要的服务器开销，以消除
重放的可能性。其他人可能会对这样的随机数感到满意
建议限制为单个 IP 地址和单个 ETag
或具有有限的使用寿命。





Franks 等人。标准轨道 [第 26 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


底线是，任何合规的实施都将
按照加密标准来说相对较弱，但*任何*都符合
实施将远远优于基本身份验证。

5 示例实现

以下代码实现了 H(A1)、H(A2) 的计算，
请求摘要和响应摘要，以及计算的测试程序
3.5 节示例中使用的值。它使用 MD5
来自 RFC 1321 的实现。

文件“digcalc.h”：

#定义 HASHLEN 16
typedef char HASH[HASHLEN];
#定义 HASHHEXLEN 32
typedef char HASHHEX[HASHHEXLEN+1];
#定义在
#定义输出

/* 根据 HTTP Digest 规范计算 H(A1) */
无效 DigestCalcHA1（
在 char * pszAlg 中，
在 char * pszUserName 中，
在 char * pszRealm 中，
在 char * pszPassword 中，
在 char * pszNonce 中，
在 char * pszCNonce 中，
输出 HASHHEX 会话密钥
（英文）：

/* 根据 HTTP 摘要规范计算请求摘要/响应摘要 */
无效 DigestCalcResponse（
在哈希十六进制 HA1 中，/* H(A1) */
IN char * pszNonce, /* 来自服务器的随机数 */
IN char * pszNonceCount, /* 8 个十六进制数字 */
IN char * pszCNonce, /* 客户端随机数 */
IN char * pszQop，/* qop 值：“”，“auth”，“auth-int”*/
IN char * pszMethod, /* 来自请求的方法 */
IN char * pszDigestUri, /* 请求的 URL */
在 HASHHEX HEntity 中，/* 如果 qop="auth-int"，则为 H（实体主体）*/
OUT HASHHEX 响应 /* 请求摘要或响应摘要 */
（英文）：

文件“digcalc.c”：

#包括 <全局.h>
#包括 <md5.h>



Franks 等人。标准轨道 [第 27 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


#include <string.h>
#包括“digcalc.h”

无效CvtHex（
在 HASH 箱中，
输出哈希十六进制
）
{
无符号短整型 i；
无符号字符j；

对于（i = 0；i < HASHLEN；i++）{
j = (Bin[i] >> 4) & 0xf;
如果 (j <= 9)
Hex[i*2] = (j + '0');
别的
Hex[i*2] = (j + ‘a’ - 10);
j = Bin[i] & 0xf;
如果 (j <= 9)
Hex[i*2+1] = (j+'0');
别的
Hex[i*2+1] = (j+'a' - 10);
};
十六进制[HASHHEXLEN] = '\0';
};

/* 根据规范计算 H(A1) */
无效 DigestCalcHA1（
在 char * pszAlg 中，
在 char * pszUserName 中，
在 char * pszRealm 中，
在 char * pszPassword 中，
在 char * pszNonce 中，
在 char * pszCNonce 中，
输出 HASHHEX 会话密钥
）
{
MD5_CTX Md5Ctx；
哈希HA1；

MD5Init（＆Md5Ctx）；
MD5Update(&Md5Ctx， pszUserName， strlen(pszUserName));
MD5更新(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszRealm， strlen(pszRealm));
MD5更新(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszPassword， strlen(pszPassword));
MD5Final(HA1，&Md5Ctx);
如果 (stricmp(pszAlg, “md5-sess”) == 0) {



Franks 等人。标准轨道 [第 28 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


MD5Init（＆Md5Ctx）；
MD5Update(&Md5Ctx， HA1， HASHLEN);
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszNonce， strlen(pszNonce));
MD5更新(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszCNonce， strlen(pszCNonce));
MD5Final(HA1，&Md5Ctx);
};
CvtHex（HA1，会话密钥）；
};

/* 根据 HTTP 摘要规范计算请求摘要/响应摘要 */
无效 DigestCalcResponse（
在哈希十六进制 HA1 中，/* H(A1) */
IN char * pszNonce, /* 来自服务器的随机数 */
IN char * pszNonceCount, /* 8 个十六进制数字 */
IN char * pszCNonce, /* 客户端随机数 */
IN char * pszQop，/* qop 值：“”，“auth”，“auth-int”*/
IN char * pszMethod, /* 来自请求的方法 */
IN char * pszDigestUri, /* 请求的 URL */
在 HASHHEX HEntity 中，/* 如果 qop="auth-int"，则为 H（实体主体）*/
OUT HASHHEX 响应 /* 请求摘要或响应摘要 */
）
{
MD5_CTX Md5Ctx；
哈希HA2；
HASH 重新哈希；
哈希十六进制 HA2Hex；

// 计算 H(A2)
MD5Init（＆Md5Ctx）；
MD5Update(&Md5Ctx， pszMethod， strlen(pszMethod));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszDigestUri， strlen(pszDigestUri));
如果 (stricmp(pszQop，“auth-int”) == 0) {
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, HEntity, HASHHEXLEN);
};
MD5Final(HA2，&Md5Ctx);
CvtHex（HA2，HA2Hex）；

// 计算响应
MD5Init（＆Md5Ctx）；
MD5Update(&Md5Ctx， HA1， HASHHEXLEN);
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszNonce， strlen(pszNonce));
MD5Update(&Md5Ctx, ":", 1);
如果 (*pszQop) {



Franks 等人。标准轨道 [第 29 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


MD5Update(&Md5Ctx， pszNonceCount， strlen(pszNonceCount));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszCNonce， strlen(pszCNonce));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx， pszQop， strlen(pszQop));
MD5Update(&Md5Ctx, ":", 1);
};
MD5Update(&Md5Ctx， HA2Hex， HASHHEXLEN);
MD5Final(RespHash，&Md5Ctx);
CvtHex（RespHash，响应）；
};

文件“digtest.c”：


#包括 <stdio.h>
#包括“digcalc.h”

void main(int argc，char ** argv) {

char * pszNonce = “dcd98b7102dd2f0e8b11d0f600bfb0c093”;
char * pszCNonce = “0a4f113b”;
char * pszUser = "穆法萨";
char * pszRealm = "testrealm@host.com";
char * pszPass = "生命之环";
char * pszAlg = "md5";
char szNonceCount[9] = "00000001";
char * pszMethod = “获取”;
char * pszQop =“ 身份验证”;
char * pszURI = "/dir/index.html";
哈希十六进制 HA1；
HASHHEX HA2 =“”;
HASHHEX 响应；

DigestCalcHA1（pszAlg，pszUser，pszRealm，pszPass，pszNonce，
pszCNonce， HA1);
DigestCalcResponse（HA1，pszNonce，szNonceCount，pszCNonce，pszQop，
pszMethod、pszURI、HA2、响应）；
printf("响应 = %s\n", 响应);
};











Franks 等人。标准轨道 [第 30 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


6 致谢

AbiSource, Inc. 的 Eric W. Sink 是原作者之一
在规范进行重大修改之前。

除了作者之外，有价值的讨论有助于
本文档的创建者是 Peter J. Churchyard、Ned Freed、
和 David M. Kristol。

Jim Gettys 和 Larry Masinter 编辑了本文档并进行了更新。

7 参考文献

[1] Berners-Lee, T.、Fielding, R. 和 H. Frystyk，“超文本
传输协议 - HTTP/1.0”，RFC 1945，1996 年 5 月。

[2] Fielding, R.、Gettys, J.、Mogul, J.、Frysyk, H.、Masinter, L.，
Leach, P. 和 T. Berners-Lee，“超文本传输协议——
HTTP/1.1”，RFC 2616，1999 年 6 月。

[3] Rivest，R.，“MD5 消息摘要算法”，RFC 1321，2017 年 4 月
1992 年。

[4] Freed, N. 和 N. Borenstein.“多用途互联网邮件
扩展 (MIME) 第一部分：互联网消息主体格式”，
RFC 2045，1996 年 11 月。

[5] Dierks, T. 和 C. Allen，“TLS 协议，版本 1.0”，RFC
2246，1999 年 1 月。

[6] Franks，J.、Hallam-Baker，P.、Hostetler，J.、Leach，P.，
Luotonen, A.、Sink, E. 和 L. Stewart，“HTTP 的扩展：
摘要访问认证”，RFC 2069，1997 年 1 月。

[7] Berners Lee, T.、Fielding, R. 和 L. Masinter，“统一资源定位器”
标识符（URI）：通用语法”，RFC 2396，1998 年 8 月。

[8] Kaliski, B.、Robshaw, M.，“使用 MD5 进行消息认证”，
CryptoBytes，1995 年春季，RSA Inc，
（http://www.rsa.com/rsalabs/pubs/cryptobytes/spring95/md5.htm）

[9] Klensin, J.、Catoe, R. 和 P. Krumviede，“IMAP/POP AUTHorize
“简单质询/响应扩展”，RFC 2195，9 月
1997 年。

[10] Morgan，B.、Alvestrand，H.、Hodges，J.、Wahl，M.，
“LDAP 的身份验证方法”，正在进行中。




Franks 等人。标准轨道 [第 31 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


8 作者地址

約翰·弗兰克斯
数学教授
数学系
西北大学
美国伊利诺伊州埃文斯顿 60208-2730

电子邮件: john@math.nwu.edu


菲利普·M·哈勒姆·贝克
首席顾问
关于威瑞信公司
301 埃奇沃特广场
210 套房
美国马萨诸塞州韦克菲尔德 01880

电子邮件：pbaker@verisign.com


杰弗里·L·霍斯特勒
软件工匠
AbiSource 公司
邓拉普阁 6 号
萨沃伊，伊利诺伊州 61874

电子邮件: jeff@AbiSource.com


斯科特·D·劳伦斯
Agranat 系统公司
5 钟楼广场, 套房 400
美国马萨诸塞州梅纳德 01754

电子邮件: lawrence@agranat.com


保罗·J·利奇
微软公司
1 微软之路
美国华盛顿州雷德蒙德 98052

电子邮件：paulle@microsoft.com







Franks 等人。标准轨道 [第 32 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


阿里·洛托宁
技术人员
网景通讯公司
东米德尔菲尔德路 501 号
美国加利福尼亚州山景城 94043


劳伦斯·C·斯图尔特
开放市场股份有限公司
第一街 215 号
美国马萨诸塞州剑桥 02142

电子邮件: stewart@OpenMarket.com






































Franks 等人。标准轨道 [第 33 页]

RFC 2617 HTTP 身份验证 1999 年 6 月


9. 完整版权声明

版权所有 (C) 互联网协会 (1999)。保留所有权利。

本文件及其翻译件可复制并提供给
其他作品，以及对其评论或以其他方式解释的衍生作品
或协助其实施，可以制作、复制、出版
并分发，全部或部分，不受任何限制
此类，但前提是上述版权声明和本段
在所有此类副本和衍生作品中均包含。然而，
文档本身不得以任何方式修改，例如删除
版权声明或对互联网协会或其他
互联网组织，除非出于
制定互联网标准，在这种情况下
互联网标准流程中定义的版权必须
或按要求将其翻译成其他语言
英语。

上述授予的有限权限是永久性的，不会
由互联网协会或其继承者或受让人撤销。

本文件及其所含信息均以
“按原样”基础和互联网协会和互联网工程
任务组否认所有明示或暗示的保证，包括
但不限于任何保证使用该信息
此处不侵犯任何权利或任何默示保证
适销性或特定用途的适用性。

致谢

RFC 编辑器功能的资金目前由
互联网协会。



















Franks 等人。标准轨道 [第 34 页]

